# To-Do List

## Phase 1: Setup & Backend Foundation

1. Configure Development Tools
   - [x] Set up Tailwind CSS
   - [x] Configure ESLint and Prettier
   - [x] Configure Vitest

2. Initialize Prisma
   - [x] Run `npx prisma init`
   - [x] Configure database connection string in `.env`

3. Define Database Schema
   - [x] Edit `prisma/schema.prisma`
   - [x] Define `User` model with `id`, `username`, `hashedPassword`, and `activePublicKeyId`
   - [x] Define `PublicKeyHistory` model with `id`, `userId`, `publicKey`, `createdAt`

4. Run Database Migration
   - [x] Run `npx prisma migrate dev --name add_public_key_history`

5. Implement Server-Side User Registration
   - [x] Handle user registration and store public keys

6. Implement Server-Side User Login
   - [x] Handle user login and password verification

7. Implement Server-Side Get Users/Public Keys
   - [x] Fetch list of users with usernames and public keys

## Phase 2: Client-Side Implementation & Key Management

8. Create Registration and Login Pages/Components
   - [x] Implement registration and login forms

9. Implement Client-Side ECDSA Key Generation
   - [x] Generate ECDSA key pair and store private key locally

10. Implement Client-Side Private Key Retrieval
    - [x] Check for private key in local storage and prompt if missing

11. Implement Client-Side and Server-Side Public Key Update
    - [x] change db schema: simplify publickey table, and add active pbkey in user
    - [x] update register so keys are generated based from username and password
    - [x] after login check whether there's a pkey in local storage, if not add pop-up saying "private key not detected, to generate in local storage enter your password" or something similiar.


## Phase 3: Real-time Chat & Security Implementation

12. Set up WebSocket Server
    - [x] Integrate `ws` library for real-time communication

13. Set up WebSocket Client + UI
    - [x] Establish WebSocket connection on client-side
    - [x] Make simple GUI for chat

14. Implement Client-Side Message Sending
    - [x] Sign and send messages using ECDSA keys

15. Implement Server-Side Message Handling
    - [ ] Store and forward messages to recipients

16. Implement Client-Side Message Receiving
    - [x] Verify received messages and display status

## Phase 4: UI & Refinement

17. Build Contact List UI
    - [x] Display list of users and allow selection

18. Build Chat Interface UI
    - [x] Implement chat display and input area

19. Add Error Handling and Loading States
    - [ ] Implement error handling and loading indicators

20. Write Tests (Using Vitest)
    - [ ] Write tests for server-side and client-side logic

21. Refine and Iterate
    - [ ] Improve UI/UX and address bugs

## Phase 5: Deployment

22. Prepare for Deployment
    - [x] Configure environment for production

23. Deploy
    - [x] Deploy application to hosting platform

This list is now more concise, focusing on the main tasks without detailed steps.